‘r@ü™assertions§code¥customTransformCache¨dependencies¢id§meta±moduleSideEffects¨originalCode±originalSourcemap´resolvedIdsÆsourcemapChainµsyntheticNamedExportsµtransformDependenciesÆtransformFiles®cacheAst‘rAê⁄aif (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface Index_Params {
    message?: string;
    Menulist?: Array<MenuMedelData>;
}
import type common from "@ohos.app.ability.common";
import util from '@ohos.util';
import type { MenuMedel, MenuMedelData } from '../model/MenuMedel';
class Index extends ViewPU {
    constructor(parent, params, __localStorage, elmtId = -1, paramsLambda = undefined, extraInfo) {
        super(parent, __localStorage, elmtId, extraInfo);
        if (typeof paramsLambda === "function") {
            this.paramsGenerator_ = paramsLambda;
        }
        this.__message = new ObservedPropertySimplePU('Hello World', this, "message");
        this.__Menulist = new ObservedPropertyObjectPU([], this, "Menulist");
        this.setInitiallyProvidedValue(params);
        this.finalizeConstruction();
    }
    setInitiallyProvidedValue(params: Index_Params) {
        if (params.message !== undefined) {
            this.message = params.message;
        }
        if (params.Menulist !== undefined) {
            this.Menulist = params.Menulist;
        }
    }
    updateStateVars(params: Index_Params) {
    }
    purgeVariableDependenciesOnElmtId(rmElmtId) {
        this.__message.purgeDependencyOnElmtId(rmElmtId);
        this.__Menulist.purgeDependencyOnElmtId(rmElmtId);
    }
    aboutToBeDeleted() {
        this.__message.aboutToBeDeleted();
        this.__Menulist.aboutToBeDeleted();
        SubscriberManager.Get().delete(this.id__());
        this.aboutToBeDeletedInternal();
    }
    // ËØªÂèñÊú¨Âú∞json
    private __message: ObservedPropertySimplePU<string>;
    get message() {
        return this.__message.get();
    }
    set message(newValue: string) {
        this.__message.set(newValue);
    }
    private __Menulist: ObservedPropertyObjectPU<Array<MenuMedelData>>;
    get Menulist() {
        return this.__Menulist.get();
    }
    set Menulist(newValue: Array<MenuMedelData>) {
        this.__Menulist.set(newValue);
    }
    aboutToAppear() {
        let mContext = getContext() as common.UIAbilityContext; // Ëé∑Âèñ‰∏ä‰∏ãÊñá
        this.getjsonfile(mContext); // Âä†ËΩΩ JSON Êï∞ÊçÆ
    }
    async getjsonfile(context: common.UIAbilityContext) {
        // // 1. ËØªÂèñÊú¨Âú∞ JSON Êñá‰ª∂
        let getjson = await context.resourceManager.getRawFileContent('data.json');
        console.log("getjson--->" + getjson);
        //  // 2. Ëß£Á†ÅÊñá‰ª∂ÂÜÖÂÆπ
        let textDecoderOptions: util.TextDecoderOptions = { ignoreBOM: true };
        let textDecoder = util.TextDecoder.create("utf-8", textDecoderOptions);
        let result = textDecoder.decodeWithStream(getjson, { stream: false });
        console.log("result--->" + result);
        //  // 3. Ëß£Êûê JSON Âπ∂Êõ¥Êñ∞Êï∞ÊçÆ
        let menumodel: MenuMedel = JSON.parse(result);
        this.Menulist = menumodel.data;
    }
    initialRender() {
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            List.create({ space: 10 });
            List.height('100%');
            List.width('100%');
        }, List);
        this.observeComponentCreation2((elmtId, isInitialRender) => {
            ForEach.create();
            const forEachItemGenFunction = _item => {
                const item = _item;
                {
                    const itemCreation = (elmtId, isInitialRender) => {
                        ViewStackProcessor.StartGetAccessRecordingFor(elmtId);
                        itemCreation2(elmtId, isInitialRender);
                        if (!isInitialRender) {
                            ListItem.pop();
                        }
                        ViewStackProcessor.StopGetAccessRecording();
                    };
                    const itemCreation2 = (elmtId, isInitialRender) => {
                        ListItem.create(deepRenderFunction, true);
                    };
                    const deepRenderFunction = (elmtId, isInitialRender) => {
                        itemCreation(elmtId, isInitialRender);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Row.create();
                            Row.height(100);
                            Row.width('100%');
                            Row.justifyContent(FlexAlign.Start);
                        }, Row);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Image.create(item?.pic);
                            Image.width(100);
                            Image.height(100);
                            Image.objectFit(ImageFit.Fill);
                            Image.borderRadius(5.0);
                        }, Image);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Column.create({ space: 10 });
                            Column.width('calc(100% - 112vp)');
                            Column.height('100%');
                            Column.margin({ left: 12, top: 6 });
                            Column.justifyContent(FlexAlign.Start);
                            Column.alignItems(HorizontalAlign.Start);
                        }, Column);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create(item?.name);
                            Text.fontSize(18);
                            Text.fontColor(Color.Black);
                            Text.textAlign(TextAlign.End);
                            Text.backgroundColor(Color.Red);
                        }, Text);
                        Text.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create(item?.content);
                            Text.fontColor(Color.Gray);
                            Text.fontSize(15);
                            Text.maxLines(2);
                            Text.textOverflow({ overflow: TextOverflow.Ellipsis });
                        }, Text);
                        Text.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Row.create();
                            Row.width("100%");
                            Row.justifyContent(FlexAlign.SpaceBetween);
                            Row.backgroundColor(Color.Red);
                        }, Row);
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Text.create(item?.cookingtime);
                            Text.fontSize(13);
                            Text.fontColor(Color.Gray);
                            Text.textAlign(TextAlign.Start);
                        }, Text);
                        Text.pop();
                        this.observeComponentCreation2((elmtId, isInitialRender) => {
                            Button.createWithLabel("Êü•Áúã");
                            Button.height(16);
                            Button.width(50);
                        }, Button);
                        Button.pop();
                        Row.pop();
                        Column.pop();
                        Row.pop();
                        ListItem.pop();
                    };
                    this.observeComponentCreation2(itemCreation2, ListItem);
                    ListItem.pop();
                }
            };
            this.forEachUpdateFunction(elmtId, this.Menulist, forEachItemGenFunction);
        }, ForEach);
        ForEach.pop();
        List.pop();
    }
    rerender() {
        this.updateDirtyElements();
    }
    static getEntryName(): string {
        return "Index";
    }
}
registerNamedRoute(() => new Index(undefined, {}), "", { bundleName: "com.example.getjson", moduleName: "entry", pagePath: "pages/Index", pageFullPath: "entry/src/main/ets/pages/Index", integratedHsp: "false", moduleType: "followWithHap" });
¬ëŸ\ hvigor_ignore_D:_study_huawei_DevEco Studio_sdk_default_openharmony_ets_api_@ohos.util.d.tsŸ>D:\study\huawei\day2\getJso\entry\src\main\ets\pages\Index.ets‘rBö™moduleName±isLocalDependencyØisNodeEntryFileßpkgPath±belongProjectPathßpkgName™pkgVersion±dependencyPkgInfo∞belongModulePathØhostModulesInfo•entry√¬Ÿ!D:\study\huawei\day2\getJso\entryªD:\study\huawei\day2\getJso•entry•1.0.0‘  Ÿ!D:\study\huawei\day2\getJso\entryê√⁄
Limport {common} from '@kit.AbilityKit'
import util from '@ohos.util';
import { it } from '@ohos/hypium';
import {MenuMedel,MenuMedelData} from '../model/MenuMedel'


@Entry
@Component
struct Index {

  // ËØªÂèñÊú¨Âú∞json
  @State message: string = 'Hello World';
  @State Menulist: Array<MenuMedelData> =[];

  aboutToAppear() {
    let mContext = getContext() as common.UIAbilityContext; // Ëé∑Âèñ‰∏ä‰∏ãÊñá
    this.getjsonfile(mContext); // Âä†ËΩΩ JSON Êï∞ÊçÆ
  }


  async getjsonfile(context: common.UIAbilityContext){
    // // 1. ËØªÂèñÊú¨Âú∞ JSON Êñá‰ª∂
    let getjson=await context.resourceManager.getRawFileContent('data.json')
    console.log("getjson--->"+getjson)

    //  // 2. Ëß£Á†ÅÊñá‰ª∂ÂÜÖÂÆπ
    let textDecoderOptions:util.TextDecoderOptions={ignoreBOM:true};
    let textDecoder=util.TextDecoder.create("utf-8",textDecoderOptions);
    let result =textDecoder.decodeWithStream(getjson,{stream:false});
    console.log("result--->"+result)

    //  // 3. Ëß£Êûê JSON Âπ∂Êõ¥Êñ∞Êï∞ÊçÆ
    let menumodel:MenuMedel=JSON.parse(result);
    this.Menulist=menumodel.data;
  }


  build() {
    List({space: 10}){
      ForEach(this.Menulist,(item :MenuMedelData) =>{
        ListItem(){
          Row(){
            Image(item?.pic)
              .width(100)
              .height(100)
              .objectFit(ImageFit.Fill)
              .borderRadius(5.0)
            Column({space : 10}){
              Text(item?.name)
                .fontSize(18)
                .fontColor(Color.Black)
                .textAlign(TextAlign.End)
                .backgroundColor(Color.Red)
              Text(item?.content)
                .fontColor(Color.Gray)
                .fontSize(15)
                .maxLines(2)  //ÈÄâÊã©ÊòæÁ§∫Âá†Ë°å
                .textOverflow({overflow:TextOverflow.Ellipsis}) //ÂêéÈù¢Â±ïÁ§∫‰∏â‰∏™ÁÇπ
              Row(){
                Text(item ?.cookingtime)
                  .fontSize(13)
                  .fontColor(Color.Gray)
                  .textAlign(TextAlign.Start)
                Button("Êü•Áúã")
                  .height(16)
                  .width(50)
              }
              .width("100%")
              .justifyContent(FlexAlign.SpaceBetween)
              .backgroundColor(Color.Red)
            }
            .width('calc(100% - 112vp)')
            .height('100%')
            .margin({left: 12,top :6})
            .justifyContent(FlexAlign.Start)
            .alignItems(HorizontalAlign.Start)
          }
          .height(100)
          .width('100%')
          .justifyContent(FlexAlign.Start)
        }
      })
    }
    .height('100%')
    .width('100%')
  }
}¿‘rCë™@ohos.util‘rDó™assertions®external¢id§meta±moduleSideEffects™resolvedByµsyntheticNamedExportsA√Ÿ\ hvigor_ignore_D:_study_huawei_DevEco Studio_sdk_default_openharmony_ets_api_@ohos.util.d.ts‘rEëØhostModulesInfoë‘rFí≤hostDependencyNameÆhostModuleName™@ohos.util•entry√™oh-resolve¬í‘rGíßmissing¶plugin√¨etsTransform‘rHñßversion§fileßsourcesÆsourcesContent•names®mappings¿ë¿ë¿ê‹ ∞ëî    ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî  	 ëî  
 ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî    ëî  ! ëî  " ëî  # ëî  $ ëî  % ëî  & ëî  ' ëî  ( ëî  ) ëî  * ëî  + ëî  , ëî  - ëî  . ëî  / ëî  0 ëî  1 ëî  2 ëî  3 ëî  4 ëî  5 ëî  6 ëî  7 ëî  8 ëî  9 ëî  : ëî  ; ëî  < ëî  = ëî  > ëî  ? ëî  Ã@ ëî  ÃA ëî  ÃB ëî  ÃC ëî  ÃD ëî  ÃE ëî  ÃF ëî  ÃG ëî  ÃH ëî  ÃI ëî  ÃJ ëî  ÃK ëî  ÃL ëî  ÃM ëî  ÃN ëî  ÃO ëî  ÃP ëî  ÃQ ëî  ÃR ëî  ÃS ëî  ÃT ëî  ÃU ëî  ÃV ëî  ÃW ëî  ÃX ëî  ÃY ëî  ÃZ ëî  Ã[ ëî  Ã\ ëî  Ã] ëî  Ã^ ëî  Ã_ ëî  Ã` ëî  Ãa ëî  Ãb ëî  Ãc ëî  Ãd ëî  Ãe ëî  Ãf ëî  Ãg ëî  Ãh ëî  Ãi ëî  Ãj ëî  Ãk ëî  Ãl ëî  Ãm ëî  Ãn ëî  Ão ëî  Ãp ëî  Ãq ëî  Ãr ëî  Ãs ëî  Ãt ëî  Ãu ëî  Ãv ëî  Ãw ëî  Ãx ëî  Ãy ëî  Ãz ëî  Ã{ ëî  Ã| ëî  Ã} ëî  Ã~ ëî  Ã ëî  ÃÄ ëî  ÃÅ ëî  ÃÇ ëî  ÃÉ ëî  ÃÑ ëî  ÃÖ ëî  ÃÜ ëî  Ãá ëî  Ãà ëî  Ãâ ëî  Ãä ëî  Ãã ëî  Ãå ëî  Ãç ëî  Ãé ëî  Ãè ëî  Ãê ëî  Ãë ëî  Ãí ëî  Ãì ëî  Ãî ëî  Ãï ëî  Ãñ ëî  Ãó ëî  Ãò ëî  Ãô ëî  Ãö ëî  Ãõ ëî  Ãú ëî  Ãù ëî  Ãû ëî  Ãü ëî  Ã† ëî  Ã° ëî  Ã¢ ëî  Ã£ ëî  Ã§ ëî  Ã• ëî  Ã¶ ëî  Ãß ëî  Ã® ëî  Ã© ëî  Ã™ ëî  Ã´ ëî  Ã¨ ëî  Ã≠ ëî  ÃÆ ê¬ê‘  ‘rIî≤dynamicImportCacheπexportAllDeclarationCacheªexportNamedDeclarationCache´importCacheêêêë‘rJï§type•start£end™specifiers¶source±ImportDeclarationÕÕ%ë‘rKî§type•start£end•local∂ImportDefaultSpecifierÕÕ‘rLî§type•start£end§name™IdentifierÕÕ§util‘rMï§type•start£end•value£rawßLiteralÕÕ$™@ohos.util¨'@ohos.util'